'LTPOnline
'Script written by Heiko Endle, Universit√§tsmedizin Mainz, Germany.
Proc Versions()
'------------------------------------Changelog---------------------------------------
'LTPOnline Script Versions
'1.4b    - Refactored new LTPOnline Script
'1.41b   - Added manual cursor positioning /need: save cursor positions for each frame state
'1.41b   - Added saving cursor positions for each frame state
'1.42b   - Added button to load config files
'        - Added button to save config files
'1.5b    - multiple response channels:
'           - Channel select dialog allows to select multiple response channels
'1.51b   - fixed a bug that would crash the script when analyzing files where only higher FrameStates or Channels where used (e.g. Ch2 and State 2 but not Ch1 and State 1)
'1.52b   - fixed online sampling
'1.53b   - fixed Analysis taking the wrong amounts of frames for averages, changes to SamplingInterval
end;
'---------------------------Global Variable Declarations-----------------------------
var LTPOnlineVersion$:="1.53b";    'Script Version
var SampleStates%:=SampleStates(); 'stores the number of frame states (number of stimulation Channels)
var FrameStates%[0];               'stores the frame states as a list
'------------View and Channel handles--------
var configFile%;          'handle for config file
var samplingFile%;        'view handle for the currend sampling file
var ch%[0];               'response channel
var lastFrame%;           'last processed frame of samplingFile
var slopePlot%;           'view handle for online plot of Slope
var ampPlot%;             'view handle for online plot of amplitude
var FVPlot%;              'view handle for online plot of Fiber Volley
var avgdata%[SampleStates%*len(ch%)];       'contains view handles of averaged data
'----------------Dialog handles--------------
var dlgTextIO%;           'stores item numbers IO-Module Explanation Dlg text
'--------------Cursor Positions--------------
var CursorPositions[SampleStates%][8][1];      'stores the position for cursors
'-----------------Flags------------------------
'---State strings for display---
var recstate$:="STOPPED";            'stores recording state as String for display to user
var ModeStr$[]:={"Idle","Scanning File","Input/Output","Baseline","LTP induction","LTP"};           'Mode as string for display to user
'---Internal flags--------------
var Mode%:=0;                               'flag for recording mode (index of ModeStr$)
var manualCursorMap%[SampleStates%][2];     'flags (one for each frame state) for modules that set cursors manually
'---------------Recording Parameters-----------
var SamplingInterval[SampleStates%];     'Stores the samplinginterval in s
var XTick:=60;                'Stores x-axis tick length in s
'------------Response detection settings--------------------
'------------Modules---------------------------
var currentDetectionModule%; 'stores currently selected detection module as index of detectionModules$
var detectionModules$[]:={"Auto v1.39","Manual Cursor Positions"};
var currentIOModule%;        'stores currently selected IO module as index of detectionModules$
var IOModules$[]:={"I/O Manual v1.39"};
var IOModulesExplanation$[]:={"IO Curve 1V to 9V, 2V-6V in triple replicates"};
'------------Settings-------------------------
var high%:=90;            'high percent of slope (eg. 90)
var low%:=10;             'low percent of slope (eg. 10)
var average:=5;           'Stores the number of minutes to average
var lowpass:=0;           'Lowpass cutoff value for filtering false detections including artifact
'------------------------------------------------------------------------------------
'------------Includes----------------------------------------
#include "libs/libLTPCursor.sgs"
#include "libs/libAnalysisTools.sgs"
#include "libs/libFileHandling.sgs"
#include "libs/libArrayMap.sgs"
#include "libs/libIOCurve.sgs"
'------------------------------------------------------------

'---Main Program---
DoToolbar();
Halt;

'-----Module Registration----
'Register your Cursor setter modules here in this function
Func LTPSetCursor(dataView%, channel%, high%, low%, usercorrect%)
docase
    case currentDetectionModule% = 0 then LTPCursorSetv139(dataView%,channel%, usercorrect%);   'Auto v1.39
    case currentDetectionModule% = 1 then                                                       'Manual
        if getMapValue%(manualCursorMap%,FrameState(-2)) <> 1 then  'if the cursors for this frame state have not been set yet
            LTPCursorSetManual(dataView%,channel%,high%,low%);  'let the user set the cursors
            SaveCursors(CursorPositions);                       'save cursor positions
            setMapValue%(manualCursorMap%,FrameState(-2),1);    'flag cursors for this frame state as set
        else;
            LoadCursors(CursorPositions);
        endif;    
endcase
return;
end;
'Register your IO Curve modules here in this function
Func IOCurve(curveID%,currentframe%,SampleStates%)
docase
    case curveID% = 0 then IO1to9v(currentframe%,SampleStates%);
endcase
return;
end;
'-----Functions-----
Func DoToolbar()            'Initialize Toolbar
ToolbarClear();
ToolbarSet(0,"", Idle%); 'Define an idle function 
ToolbarSet(1,"Quit", Quit%);
ToolbarSet(2, "Start", Start%); 'Link to Start function
ToolbarSet(3, "Stop Recording", Stop%); 'Link to Stop function
ToolbarSet(4, "Mode", Modedial%); 'Link to Mode selection Dialog
ToolbarSet(5, "Rescan", rescan%); 'Link to rescan function
ToolbarSet(6, "Analyze", Analyze%); 'Link to Analyze function
ToolbarSet(7, "Settings", Settings%); 'Link to Config function
return Toolbar("LTP Online Skript Version: "+LTPOnlineVersion$+" | Response Detection Version: "+libLTPCursorVersion$+" | Sample States: "+Str$(SampleStates%), 0);
end;


Func idle%()                'Idle function. Called when script idles

var f%;  'frame count
var n%;  'loop counter

if samplingFile% <> 0 then  'if there is an open file to work on
    view (samplingFile%);   'make the data window current view
    f% := FrameCount();     'get the number of frames in the file

    If ((f% - lastFrame%) >= 1) then 'if we have >= 1 unprocessed sweeps
        
        Frame(lastFrame%+1);    'Go to next unprocessed frame
        UpdateToolbarText();
        
        for n%:=0 to len(ch%)-1 do  'loop through analysis channels
            LTPSetCursor(samplingFile%,ch%[n%],high%,low%,0);   'setup cursors for each channel
            plotDataFrame(ch%[n%]);
        next;     
                
        if Mode% = 2 then       'if IO mode is turned on
            IOCurve(currentIOModule%,f%,SampleStates%);
        endif;
        
        lastFrame%+=1;  'mark frame as processed
    endif;
endif;

return 1;
end;

Func Quit%()                'Button 1 to quit script
return 0; ' Return zero to exit Toolbar()
end;
Func Start%()               'Button 2 START SAMPLING routine
samplingFile%:=FileNew(0,1);    'create new file according to sampling config
Window(0,0,50,100); 'And display on the left side of the screen

'ch%:=ChanSelectDlg(samplingFile%);
ChSelectMultiple(samplingFile%);
SampleStates%:=SampleStates();
getSampleStateList%(FrameStates%);              'get list of frame states from File
createMap%(manualCursorMap%,FrameStates%);      'create a map containing all frame states as keys and all values set to 0
resize CursorPositions[SampleStates%][][];      'resize array to store cursor positions for all frame states
SampleStart();
recstate$:="RECORDING";
UpdateToolbarText();
SetUpWorkspace();
return 1;                   'This leaves toolbar active
end;

Func Stop%()                'Button 3 STOP SAMPLING routine
var err%;
err%:=SampleStop();
if err% = 0 then
    recstate$:="STOPPED";
    UpdateToolbarText();
endif
return 1; 'This leaves toolbar active
end;

Func Modedial%()            'Button 4 for Mode dial
DlgCreate("Mode select");
DlgButton(2,"Input-Output",InputOutput%,1,1);
DlgButton(3,"Record Baseline",Baseline%,1,2);
DlgButton(4,"Induce LTP",Potentiation%,1,3);
DlgButton(5,"Record LTP",LTP%,1,4);
DlgShow();
return 1;   'This leaves toolbar active
end;

Func rescan%()              'Button 5 for rescanning files
samplingFile%:= FileOpen("",0,1);    'display file open dialog
SampleStates%:=GetFileFrameStateList%(FrameStates%); 'get number of frame states from File
createMap%(manualCursorMap%,FrameStates%); 'create a map containing all frame states as keys and all values set to 0
resize CursorPositions[SampleStates%][][];  'resize array to store cursor positions for all frame states
CursorDelete(-1);   'clear all existing cursors
Window(0,0,50,100); 'And display on the left side of the screen
'ch%:=ChanSelectDlg(samplingFile%); 'Diplay channel selection dialog
ChSelectMultiple(samplingFile%);
Mode%:= 1; 'flag as rescan
recstate$:="SCANNING FILE";
UpdateToolbarText();
SetUpWorkspace();
return 1;
end

Func Analyze%()             'Button 9 for Analysis

var n%;     'counter

if SampleStatus() = -1 then
    if not samplingFile% then    'if no file is opened by the script, display fileopen dialog
        samplingFile%:= FileOpen("",0,1);    'display file open dialog
        SampleStates%:=GetFileFrameStateList%(FrameStates%);   'set number of frame states from File
        GetSampleInterval(); 'get sample intervals from file
        createMap%(manualCursorMap%,FrameStates%);  'create a map containing all frame states as keys and all values set to 0
        resize CursorPositions[SampleStates%][][];  'resize array to store cursor positions for all frame states
        CursorDelete(-1);   'clear all existing cursors
        Window(0,0,50,100); 'And display on the left side of the screen
        'ch%:=ChanSelectDlg(samplingFile%); 'Diplay channel selection dialog
        ChSelectMultiple(samplingFile%);
        lastFrame%:=View(samplingFile%).FrameCount();   'flag frames as already processed
    endif    
    
    averageTrace();
    
    for n%:=0 to len(avgdata%)-1 do    'set the cursors in the newly created average views
        LTPSetCursor(avgdata%[n%],1,high%,low%,1);  'allow user to correct the cursor positions if necessary
    next;
    
    offlinePlot(avgdata%,1,50,0,100,50);
    offlinePlot(avgdata%,2,50,50,100,100)

else
    Message("Error|Analysis can not be used while sampling");
endif;


return 1; 'This leaves toolbar active
end;

Func Settings%()            'Button 7 for Settings

ReadConfig();

var dlgElement%:=1;    'iterates element position
var dlgItem%:=1;       'iterates dialog item number
var dlgResult%;

DlgCreate("LTPOnline Settings");

DlgButton(2,"Load Settings",LoadConfigBtn%,1,dlgElement%);
DlgButton(3,"Save Settings",SaveConfigBtn%,16,dlgElement%);
dlgElement%+=1;

DlgGroup("Response detection setting",0,dlgElement%,0,4);
dlgElement%+=1;
DlgList(dlgItem%,"Detection Module:",detectionModules$,len(detectionModules$),0,dlgElement%);
dlgItem%+=1;
dlgElement%+=1;
DlgInteger(dlgItem%,"Slope start in % of Amplitude",0,100,0,dlgElement%);
dlgItem%+=1;
dlgElement%+=1;
DlgInteger(dlgItem%,"Slope end in % of Amplitude",0,100,0,dlgElement%);
dlgItem%+=1;
dlgElement%+=1;

DlgGroup("Filter options",0,dlgElement%,0,2);
dlgElement%+=1;
DlgReal(dlgItem%,"Ignore responses over (mV amplitude)",0,99,0,dlgElement%,0.1);
dlgItem%+=1;
dlgElement%+=1;

DlgGroup("I/O-Curve options",0,dlgElement%,0,3);
dlgElement%+=1;
DlgList(dlgItem%,"I/O-Curve Module:",IOModules$,len(IOModules$),0,dlgElement%);
dlgItem%+=1;
dlgElement%+=1;
dlgTextIO%:=DlgText(IOModulesExplanation$[currentIOModule%],0,dlgElement%);
dlgElement%+=1;

DlgGroup("Analysis Settings",0,dlgElement%,0,2);
dlgElement%+=1;
DlgSlider(dlgItem%,"Average for analysis in minutes",1,10,1,5,0,dlgElement%);
dlgItem%+=1;
dlgElement%+=1;

DlgGroup("Script Module Versions",0,dlgElement%,0,5);
dlgElement%+=1;
DlgText("LTP Online Script Version: "+LTPOnlineVersion$+"\nResponse Detection Version: "+libLTPCursorVersion$+"\nAnalysis Tools Version: "
+libAnalysisToolsVersion$+"\nFile Handling Version: "+libFileHandlingVersion$+"\nArray Maps Version: "+libArrayMapVersion$,0,dlgElement%);

DlgAllow(0,0,SettingsChanged%);
dlgResult%:=DlgShow(currentDetectionModule%,high%,low%,lowpass,currentIOModule%,average);

if dlgResult% = 1 then
    WriteConfig();
endif;

return 1; 'This leaves toolbar active
end;

Func SettingsChanged%(item%);   'called when user changes setting in dialog

var currentvalue%;  'for storing the current value of integer based dialog items

docase
case item% = 5 then   'if IO-Curve setting changed
    currentvalue%:=DlgValue(item%); 'get the current setting of the dropdown list
    DlgValue$(dlgTextIO%,IOModulesExplanation$[currentvalue%]);   'set the explanation to current selected item
endcase;

return 1;
end;
Func LoadConfigBtn%()       'Settings dialog button to load custom config files
'---local variables---
var currentview%:=View();   'save current view
var config%:= FileOpen("",1,0,"open LTPOnline configuration file");
'---------------------
View(currentview%);

if config% > 0 then
    ReadConfig(config%);
endif;

DlgValue(1,currentDetectionModule%);
DlgValue(2,high%);
DlgValue(3,low%);
DlgValue(4,lowpass);
DlgValue(5,currentIOModule%);
DlgValue(6,average);

return 1;
end;
Func SaveConfigBtn%()       'Settings dialog button to save custom config files
'---local variables---
var currentview%:=View();   'save current view
var config%:= FileNew(1);
'---------------------
FileSaveAs("",0,"Save LTPOnline configuration file");

View(currentview%);

currentDetectionModule%:=DlgValue(1);
high%:=DlgValue(2);
low%:=DlgValue(3);
lowpass:=DlgValue(4);
currentIOModule%:=DlgValue(5);
average:=DlgValue(6);

WriteConfig(config%);

View(currentview%);

return 1;
end;
Func InputOutput%()         'Input-Output curve
if Mode% <> 2 then
    Mode%:=2;    
else
    Mode%:=0;    
endif;
UpdateToolbarText();
return 1;
end

Func Baseline%()            'Baseline
Mode%:=3;
UpdateToolbarText();
return 1;
end;
Func Potentiation%()        'LTP induction
Mode%:=4;
UpdateToolbarText();
return 1;
end;
Func LTP%()                 'LTP recording
Mode%:=5;
UpdateToolbarText();
return 1;
end;
Func ChanSelectDlg(view%)   'Displays a channel select dialog
var ch%;
var ok%;
View(view%);
DlgCreate("Select Channel for Measurements");
DlgChan(1,"Response channel",1);
ok%:= DlgShow(ch%);					'User selects response channel
if ok% = 0 then Halt; endif;		'..and we quit if user cancels
Optimise(ch%);		'Optimise the response data
return ch%;
end;
Func ChSelectMultiple(view%,channels%:=1) 'create a dialog to select multiple channels from
'---variable declaration---
var ok%;
var n%;
var itemnr%:=1;
var buttonnr%:=3;
'--------------------------
View(view%);
resize ch%[channels%];

DlgCreate("Select Channel for Measurements",0,0,65);

for n%:=1 to channels% do

    DlgChan(itemnr%,50,1,3,itemnr%);
    DlgButton(buttonnr%,"Delete",DeleteChDlg%,54,itemnr%);
    itemnr%+=1;
    buttonnr%+=1;

next;

DlgButton(2,"+", AddChDlg%,1.5,itemnr%);

ok%:= DlgShow(ch%);					'User selects response channel

docase
case ok% = 0 then
    halt;                           '..and we quit if user cancels
case ok% = -2 then
    channels%+=1;
    ChSelectMultiple(view%,channels%);
case ok% < -2 then
    channels%-=1;
    ChSelectMultiple(view%,channels%);
endcase;

return 1;
end;
Func AddChDlg%()            'Button function to add a channel to the dialog
var n%;

for n%:=0 to len(ch%)-1 do
    ch%[n%]:=DlgValue(n%+1);
next;

return -2;
end;
Func DeleteChDlg%()         'Button function to delete a channel from the dialog
var buttonnr%:=DlgButton();
var n%;
var i%;

for n%:=0 to len(ch%)-1 do
    if n% = buttonnr%-3 then
        i%+=1;
    else        
        ch%[n%-i%]:=DlgValue(n%+1);
    endif;    
next;

return -buttonnr%;
end;
Proc UpdateToolbarText()    'Update the Text on the toolbar according to current recording
    ToolbarText("LTP Online Script Version: "+LTPOnlineVersion$+" | Recording Status: "+recstate$+" | Current Frame: "+Str$(lastFrame%+1)+" | Frame State: "+Str$(FrameState(lastFrame%+1))+" | Mode: "+ModeStr$[Mode%]);
end;
Func averageTrace()         'Create averages of the original trace separated by frame states

var n%; 'outer counter
var i%; 'inner counter
var TotalInterval:=Trunc(ArrSum(SamplingInterval));
var framesPerAvg%:=average*(60/TotalInterval);
view (samplingFile%);   'set view to the original Trace
resize avgdata%[SampleStates%*len(ch%[])];   'fit arry size to number of frame states and channels

for n%:=0 to len(ch%[])-1 do
    for i%:=1 to SampleStates% do
        view (samplingFile%);   'set view to the original Trace        
        avgdata%[(n%*SampleStates%)+i%-1]:=SetAutoAv(ch%[n%],framesPerAvg%,framesPerAvg%);  'Average every x Frames
        'avgdata%[1][n%]:=1;     'set channel to one as there is only one channel after splitting frame states
        WindowVisible(1);       'display it
        ProcessFrames(-1,-1,i%,0,1,1,0,1);    'Process Frame state n%+1
        Window(0,(100/(SampleStates%*len(ch%[])))*((n%*SampleStates%)+i%-1),50,(100/(SampleStates%*len(ch%[])))*((n%*SampleStates%)+i%));	    'And display to the top left of screen
        WindowTitle$("Ch"+Str$(n%+1)+" State"+Str$(i%)+" "+Str$(Trunc(framesPerAvg%)*TotalInterval)+" s average - "+Str$(Trunc(framesPerAvg%))+" frames");
        'LTPCursorSet(avgdata%[0][0],1,1,high%,low%);
    next;
next;    
    
return;
end;

Proc SetUpWorkspace()       'Set up the workspacewindows and plots

View(samplingFile%)
var YUnit$:=ChanUnits$(ch%[0]);
var XUnit$:=XUnits$();

FVPlot%:=MakePlot(XTick,YUnit$,"Fiber Volley",50,0,100,33);
ampPlot%:=MakePlot(XTick,YUnit$,"Amplitude",50,33,100,66);
slopePlot%:=MakePlot(XTick,YUnit$+"/"+XUnit$,str$(low%)+" to "+str$(high%)+" Slope",50,66,100,100);

end;

Func MakePlot(Xseconds%,unitsY$,title$,topLeftX,topLeftY,bottomRightX,bottomRightY)   'Create XY Plot

var plot%:=FileNew(12);      'create XY view
var rgb:=1.0/(SampleStates% * len(ch%));    'used to set channel color in greyscale
var n%;         'counter
var unitsX$;    'store units of x-axis


XYJoin(1,0);                'no joining lines between points
XYKey(1,1);                 'show key
XAxisStyle(0,Xseconds%/4,1);          'Set up X axis ticks major ticks every minute with 4 subticks

docase                      'set up unit names
    case Xseconds% = 3600 then unitsX$:="h";
    case Xseconds% = 60 then unitsX$:="min";
    case Xseconds% = 1 then unitsX$:="s";
    else unitsX$:=str$(Xseconds%)+" s";    
endcase

ChanColourSet(1,1,0,0,0); 'set channel 1 to black

for n%:= 2 to SampleStates% * len(ch%) do    
    XYSetChan(0);  'set up additional channels for every frame state
    ChanColourSet(n%,1,(n%-1)*rgb,(n%-1)*rgb,(n%-1)*rgb); 'set channel color in greyscale
next;

XUnits$(unitsX$);           'set X axis units

ChanUnits$(1,unitsY$);      'set Y axis units
WindowTitle$(title$);       'Set window title

NameXYChannels(plot%);

WindowVisible(1);	        'Make it visible
Window(topLeftX,topLeftY,bottomRightX,bottomRightY);	    'And display it in position


return plot%;
end;
Proc NameXYChannels(plot%)  'Applies Channel names to XY View channels according to channels and frame states
var oldview%:=View();   'store current view
View(plot%);            'set view to the XY view passed

var channels%:=ChanCount(); 'number of channels in XY view
var n%; 'loop counter
var i%; 'loop counter

for n%:=1 to channels%/SampleStates% do 'loop through channels
    for i%:=1 to SampleStates% do       'lopp through frame states per channel
        ChanTitle$(((n%-1)*SampleStates%)+i%,"Ch"+Str$(n%)+" State"+Str$(i%)+" - "+View(samplingFile%).ChanTitle$(n%));
    next;    
next;

View(oldview%);
end;
Proc plotDataFrame(chan%)     'plot data from current frame

View(samplingFile%);
var currentFrameState%:=View(samplingFile%).FrameState(lastFrame%+1); 'get Frame state of currently analyzed frame
var currentXYchan%:=((chan%-1)*GetArrMaxValue%(FrameStates%))+currentFrameState%-((GetArrMaxValue%(FrameStates%)*GetArrMaxValue%(ch%))-(len(FrameStates%)*len(ch%)));
'var currentXYchan%:=((ch%-1)*SampleStates%)+currentFrameState%;

Frame(lastFrame%) 'set latest frame as current frame
var FrameTime:=FrameAbsStart(); 'get start time of frame
var x:=FrameTime/XTick;    'get position on x-axis
var amp:=ChanValue(chan%,Cursor(6))-ChanValue(chan%,Cursor(4)); 'get amplitude
var slope:=ChanMeasure(chan%,3,Cursor(8),Cursor(7));  'get slope

if lowpass = 0 then 'if there is no amplitude filter set
    View(ampPlot%).XYAddData(currentXYchan%,x,amp); 'plot amplitude
    View(slopePlot%).XYAddData(currentXYchan%,x,slope); 'plot slope
else
    if Abs(amp)<lowpass then    'check if amplitude is bigger then threshold
        View(ampPlot%).XYAddData(currentXYchan%,x,amp); 'plot amplitude
        View(slopePlot%).XYAddData(currentXYchan%,x,slope); 'plot slope       
    endif;    
endif;

View(ampPlot%).Optimise(-1);
View(ampPlot%).XRange(-1,x+1);
View(slopePlot%).Optimise(-1);
View(slopePlot%).XRange(-1,x+1)

end;

Func GetFileFrameStates%()  'get number of frame states from a file
var samplestates%:=0;    'stores the samplestates
var n%;    'counter frames
var i%;    'counter array
var states%[FrameCount()];  'array to store different frame states, size is equal to worst case where every frame has its own state
var doubling%:=0;    'flag if the current frame state is already in the list states%[]

For n%:=1 to FrameCount() do                    'loop through all frames
    frame(n%);                                  'view current iteration frame
    for i%:=0 to FrameCount()-1 do              'loop through list with frame states
        if FrameState(-2) = states%[i%] then    'if the current frame state matches one on the list
            doubling%:=1;                       'flag state as already on the list
            break;                              'end loop
        endif;        
    next;
    if doubling% <>1 then                       'if the current frame state has not been on the list
        states%[samplestates%]:=FrameState(-2); 'put it on the list after last entry
        samplestates%+=1;                       'increase the count of framestates by 1                      
        doubling%:=0;                           'reset flag for next loop run
    endif;    
next;

return samplestates%;                       'return number of states 

end;

Func GetFileFrameStateList%(allStates%[])   'get number of frame states from a file, the array allStates[] will be filled with a list of the frame states
var samplestates%:=0;    'stores the samplestates
var n%;    'counter frames
var i%;    'counter array
var states%[FrameCount()];  'array to store different frame states, size is equal to worst case where every frame has its own state
var doubling%:=0;    'flag if the current frame state is already in the list states%[]

For n%:=1 to FrameCount() do                    'loop through all frames
    frame(n%);                                  'view current iteration frame
    for i%:=0 to FrameCount()-1 do              'loop through list with frame states
        if FrameState(-2) = states%[i%] then    'if the current frame state matches one on the list
            doubling%:=1;                       'flag state as already on the list
            break;                              'end loop
        endif;        
    next;
    if doubling% <>1 then                       'if the current frame state has not been on the list
        states%[samplestates%]:=FrameState(-2); 'put it on the list after last entry
        samplestates%+=1;                       'increase the count of framestates by 1                      
        doubling%:=0;                           'reset flag for nex loop run
    endif;    
next;

resize allStates%[SampleStates%];           'set the passed array to the needed length
for n%:=0 to SampleStates%-1 do             'loop through array and copy all the states in
      allStates%[n%]:=states%[n%]
next;
return samplestates%;                       'return number of states 

end;

Func getSampleStateList%(allStates%[])      'get list of sample states, the array allStates[] will be filled with a list of the sample states
'---local variables---
var n%; 'counter
'---------------------

resize allStates%[SampleStates%];   'set array to fit all sample States

for n%:=1 to len(allStates%) do 'loop through array and write Sample states
    allStates%[n%-1]:=n%;
next;

return;
end;
Func GetSampleInterval()    'get the intervals between frame states

resize SamplingInterval[SampleStates%];
var n%;                 'counter

if SampleStatus() = -1 then
    var CurrentFrameState%; 'save current frame state
    var CurrentFrameTime;   'save time of current frame
    var NextFrameTime;      'save time of next frame
    var IntervalsSet%;      'counter for how often a new interval has been saved    

    For n%:=1 to FrameCount() do
        frame(n%+1);
        NextFrameTime:=FrameAbsStart(); 'get sart time of the next frame
        frame(n%);
        CurrentFrameState%:=FrameState(-2); 'get the current frame state
        CurrentFrameTime:=FrameAbsStart();  'get start time of current frame
        if SamplingInterval[CurrentFrameState%-1] = 0 then    'if there is no interval saved for the current frame state save one
            SamplingInterval[CurrentFrameState%-1]:=NextFrameTime-CurrentFrameTime;   'save interval
            IntervalsSet%+=1;   'mark that an interval has been saved
        endif;
        if IntervalsSet% = SampleStates% then break endif;  'end if an interval has been saved for every frame state
    next
else    'if sampling is running get sample interval information from sample config for fixed intervals
    For n%:=1 to SampleStates% do
        SamplingInterval[n%]:=SampleFixedInt(n%);
    next;
endif;

end;
Proc ReadConfig(view%:=-1)   'Read config file and load values stored in it then close config
'---local variables---
var currentview%:=View();   'save current view
var config%;
var value$;
'---------------------
if view% = -1 then
    config%:=LoadConfig();  'load config file
else
    config%:=view%;  'use view handle
endif;

value$:=ReadConfigEntry$(config%,"DetectionModule");
if value$ <> "null" then
    currentDetectionModule%:=Val(value$);
endif;

value$:=ReadConfigEntry$(config%,"IOCurve");
if value$ <> "null" then
    currentIOModule%:=Val(value$);
endif;

value$:=ReadConfigEntry$(config%,"SlopeTo");
if value$ <> "null" then
    high%:=Val(value$);
endif;

value$:=ReadConfigEntry$(config%,"SlopeFrom");
if value$ <> "null" then
    low%:=Val(value$);
endif;

value$:=ReadConfigEntry$(config%,"Average");
if value$ <> "null" then
    average:=Val(value$);
endif;

View(config%);
FileClose(0,-1); 'Close config file
View(currentview%); 'return to current view
end;
Proc WriteConfig(view%:=-1)  'Write current setting to config file and close it
'---local variables---
var currentview%:=View();   'save current view
var config%;
'---------------------

if view% = -1 then
    config%:=LoadConfig();  'load config file
else
    config%:=view%;  'use view handle
endif;

WriteConfigEntry(config%,"DetectionModule",Str$(currentDetectionModule%));
WriteConfigEntry(config%,"IOCurve",Str$(currentIOModule%));
WriteConfigEntry(config%,"SlopeTo",Str$(high%));
WriteConfigEntry(config%,"SlopeFrom",Str$(low%));
WriteConfigEntry(config%,"Average",Str$(average));

View(config%);
FileClose(0,-1); 'Close config file
View(currentview%); 'return to current view
end;
Func GetArrMaxValue%(arr%[]) 'Returns the highest value in an integer array

return arr%[Max(arr%[])];

end;